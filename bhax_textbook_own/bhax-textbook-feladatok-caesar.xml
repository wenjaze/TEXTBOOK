<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Caesar!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section>
        <title><type>double **</type> háromszögmátrix</title>
        <para>
            Írj egy olyan <function>malloc</function> és <function>free</function>
            párost használó C programot, amely helyet foglal
            egy alsó háromszög mátrixnak a szabad tárban!
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/1MRTuKwRsB0">https://youtu.be/1MRTuKwRsB0</link>,
            <link xlink:href="https://youtu.be/RKbX5-EWpzA">https://youtu.be/RKbX5-EWpzA</link>.
        </para>
        <para>
            Megoldás forrása: <link xlink:href="Caesar/tm.c">
                <filename>bhax/thematic_tutorials/bhax_textbook_IgyNeveldaProgramozod/Caesar/tm.c</filename>
            </link> 
        </para>
        <programlisting language="c"><![CDATA[#include <stdio.h>
#include <stdlib.h>
#include <stdio.h>

int main()
{
    double ** tm;
    int sorSzam = 5;

    if ((tm = (double**) malloc(sorSzam * sizeof(double*))) == NULL)
        return -1;

    for (int i = 0;i < sorSzam;i++){
        if ((tm[i] = (double*) malloc ((i+1) * sizeof(double)))== NULL)
        {
            free(tm);
            return -1;
        }
    }
    int szamlalo = 0;
    // feltoltes ertekekkel
    for (int i = 0;i < sorSzam;i++)
    {
        for (int j = 0;j < i+1;j++){
            szamlalo++;
            tm[i][j] = szamlalo;
        }   
    }

    // kiiras formazva
    for (int i = 0;i < sorSzam;i++){
        for (int j = 0;j < i+1;j++){
            printf("%0.f ",tm[i][j]);
            if (tm[i][j] <= 9) printf(" ");
        }   
        printf("\n");
    }

    tm[3][0] = 42.0;
    (*(tm+3))[1] = 43.0; // ha nincsen zárójel akkor a [1]-nek magasabb a precedenciája mind a dereference operatornak
    *(tm[3]+2) = 44.0;
    *(*(tm+3)+3) = 45.0;


    // kiiras formazva ujra
    for (int i = 0;i < sorSzam;i++){
        for (int j = 0;j < i+1;j++){
            printf("%0.f ",tm[i][j]);
            if (tm[i][j] <= 9) printf(" ");
        }   
        printf("\n");
    }

    // elemek felszabaditasa
    for (int i = 0;i < sorSzam;i++){
        free(tm[i]);
    }


    // tm felszab
    free(tm);

    return 0;
}
}]]></programlisting>
        <figure>
            <title>A <type>double **</type> háromszögmátrix a memóriában</title>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="img/doublecscs.png" scale="50" />
                </imageobject>
                <textobject>
                    <phrase>A <type>double **</type> háromszögmátrix a memóriában</phrase>
                </textobject>
            </mediaobject>
        </figure>                             
        <para>
            A double ** háromszögmártix célja a mutatók, a memóriafoglalás, referencia használatának szemléletése.
            Amit a fenti program csinál az az, hogy lefoglal a memóriában elegendő helyet egy alsó háromszög mátrixnak.
            A sorSzam változó meghatározzá hogy hány sorunk lesz ezáltal egyben azt is, hogy hány elemből fog állni az utolsó sorunk.

            A foglalás/felszabadításra a malloc/free utasításokat használjuk, mivel C-ben vagyunk. C++-ban ezek a new/delete utasítások lennének.

        </para>  

        <para>
            A C, valamint a C++ nyelvek nagy előnye, alacsony szintű nyelvekhez méltóan,
            a dinamikus memóriafoglalási lehetőség. Ahelyett, hogy az ember - mint más programozási nyelvekben - 
            előre definiált méretű helyet foglalna a memóriában, pl (30x3-as 2D tömbbel szemléltetve) : 

                    <programlisting language="c"><![CDATA[
            int tomb[30][3];
]]></programlisting>
            Ez a példa egy fordító adta kényelem, egyszerűsítés,
            viszont néha a részletekben rejlik a lényeg és ebben az esetben,
            a részletekhez kicsit bonyolítanunk kell a dolgokat.
            Használjunk hát pointereket, magyarul mutatókat.
            Még pontosabban, mutatóra mutató mutatókat.

            <mediaobject>
                <imageobject>
                    <imagedata fileref="files/pp.png" width="100%"/>
                </imageobject>
                <textobject>
                    <phrase>számra mutató mutató mutató</phrase>
                </textobject>
            </mediaobject>

<programlisting language="c"><![CDATA[
            int **tomb;
]]></programlisting>

            Majd az stdlib.h header használatával kézileg memóriát lefoglalni neki.

            <programlisting language="c"><![CDATA[
            #define MAX 3
            tomb = (double **)malloc(MAX * sizeof(double));
]]></programlisting>

</para>    


    </section>        
    <section>
        <title>C EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót C-ben!
        </para>
        <para>
            Megoldás forrása: egy részletes feldolgozása az 
            <link xlink:href="https://progpater.blog.hu/2011/02/15/felvetelt_hirdet_a_cia">posztban</link>, lásd az e.c forrást.               
        </para>
        <para>
            Az EXOR titkosításról legkevésbé sem lehet kijelenteni, hogy biztonságos,
            inkább egyfajta szemléltetése a XOR művelet egyik hasznosságának.
            A program úgy működik, hogy a titkosítandó szövegünk és a bekért kulcsunk alapján végig megy a titkosítandó szöveg bitjein, melyet folytonosan összeexoroz a kul
        </para>
        <para>
            Az exor titkosítás, ha csak nem használunk nagyon hosszu kulcsot,
            nem túl effektív titkosítási mód. Mint nevében is benne van, hogy ez a 
            fajta titkosítás EXOR műveletet alkalmaz.Az EXOR vagy XOR kizáró vagy-ot jelent
            jelen esetben ezt bitekre értve, ha két bit különböző akkor 1 lesz a két bit EXOR-ja,
             ha a két bit megegyezik akkor pedig 0. A megérétéshez kis maszkolásra lesz
            szükség. Legyen a és b esetén :
            &#xD;int x = 'a'; - ASCII kódja : 97
            &#xD;binárisan : 01100001
            &#xD;int y = 'b'; - ASCII kódja : 98
            &#xD;binárisan : 01100010
            &#xD;<emphasis>EXOR</emphasis>
            &#xD;x ^ y = ?
            &#xD;'a':01100001 
            &#xD;'b':01100010
            &#xD;x^y:00000011
            &#xD;x ^ y = 3
        </para>
        <para>
            Most, hogy tudjuk mi az az EXOR titkosítás, lássuk a megvalósítást
            C-ben! A programunk így működik : Az 1. parancssori argumentumunkat bekérjük
            kulcsként. Olvasunk a std::in-ről és végigmenve a fájlunk bájtjain, exorozzük
            őket folyamatosan a kulccsal.              
        </para>
        <para>
            <programlisting language="c">
            <![CDATA[
            #include <stdio.h>
            #include <unistd.h>
            #include <string.h>

            #define MAX_KULCS 5
            #define BUFF_SIZE 256

            int main(int argc,char **argv)
            {

                char buffer[BUFF_SIZE];
                char kulcs[MAX_KULCS];

                int olvasott_bajtok = 0;
                int kulcs_index = 0;
                

                int kulcs_meret = strlen(argv[1]);
                strncpy(kulcs,argv[1],MAX_KULCS);

                while((olvasott_bajtok = read(0,(void *) buffer,BUFF_SIZE)))
                {
                    for(int i =0;i<olvasott_bajtok;i++)
                    {
                        buffer[i] = buffer[i] ^ kulcs[kulcs_index];
                        kulcs_index = (kulcs_index + 1) % kulcs_meret;
                    }
                    write(1,buffer,olvasott_bajtok);
                }

                return 0;

            }
            ]]>
            </programlisting>
            Amit ezek után a standard outputra megadott fájlban találunk potosan
            az amire vártunk : bináris szemét.
        </para>            
    </section>        
    <section>
        <title>Java EXOR titkosító</title>
        <para>
            Írj egy EXOR titkosítót Java-ban!
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#exor_titkosito">https://www.tankonyvtar.hu/hu/tartalom/tkt/javat-tanitok-javat/ch01.html#exor_titkosito</link>               
        </para>
        <para>
            <programlisting language="c">
            <![CDATA[
            
public class exor {
    
    public exor(String kulcs,
            java.io.InputStream inc,
            java.io.OutputStream outg)
            throws java.io.IOException {
        
        byte [] kulcs = kulcs.getBytes();
        byte [] buffer = new byte[256];
        int kulcsIndex = 0;
        int olvasottByteok = 0;

        while((olvasottByteok =
                inc.read(buffer)) != -1) {
            
            for(int i=0; i<olvasottByteok; ++i) {
                
                buffer[i] = (byte)(buffer[i] ^ kulcs[kulcsIndex]);
                kulcsIndex = (kulcsIndex+1) % kulcs.length;
                
            }
            
            outg.write(buffer, 0, olvasottByteok);
            
        }   
    }
    
    public static void main(String[] args) {
        
        try {
            
            new exor(args[0], System.in, System.out);
            
        } catch(java.io.IOException e) {
            
            e.printStackTrace();

        }  
    }

            ]]>
            </programlisting>
        </para>         
    </section>        
    <section xml:id="bhax-textbook-feladatok-caesar.EXOR-toro">
        <title>C EXOR törő</title>
        <para>
            Írj egy olyan C programot, amely megtöri az első feladatban előállított titkos szövegeket!
        </para>
        <para>
            Megoldás forrása: egy részletes feldolgozása az 
            <link xlink:href="https://progpater.blog.hu/2011/02/15/felvetelt_hirdet_a_cia">posztban</link>, lásd az t.c forrást.               
        </para>
                <para>
            C EXOR törő működési elve a következő: Elkezdjük előállítani a lehető összes kulcsot, majd minden
            egyes kulccsal vissza-exorozzuk a forrásunkat, melyet a standard iputról olvastunk be. Aztán, mivel 
            valami alapján ki lehetne deríteni, hogy melyik az értelmes szöveg, illetve melyik nem ezért számoljuk
            az átlag szóhosszt valamint azt is figylejük, hogy hány db értelmes magyar szót tartalmaz a szöveg.
            Ha ezeknek a függvényeknek eleget tesz titkos.szövegünk, akkor megtaláltuk a kulcsot.
        </para>
        <para>
            <programlisting language="c">
            <![CDATA[
#define MAX_TITKOS 4096
#define OLVASAS_BUFFER 256
#define KULCS_MERET 5
#define _GNU_SOURCE

#include <stdio.h>
#include <unistd.h>
#include <string.h>
#include <stdlib.h>

double atlagos_szohossz(const char *titkos, int titkos_meret);
int tiszta_lehet(const char *titkos, int titkos_meret);
void exor(const char kulcs[], int kulcs_meret, char titkos[],
      int titkos_meret, char *buffer);
void exor_tores(const char kulcs[], int kulcs_meret, char titkos[],
        int titkos_meret);

int main(void)
{
    char titkos[MAX_TITKOS];
    char *p = titkos;
    char *kulcs;

    // titkos fajt berantasa
    int olvasott_bajtok;
    while ((olvasott_bajtok =
        read(0, (void *)p,
             (p - titkos + OLVASAS_BUFFER <
              MAX_TITKOS) ? OLVASAS_BUFFER : titkos +
             MAX_TITKOS - p)))
        p += olvasott_bajtok;

    // maradek hely nullazasa a titkos bufferben
    for (int i = 0; i < MAX_TITKOS - (p - titkos); ++i)
        titkos[p - titkos + i] = '\0';

    char ii, ki, ji, li, mi;

#pragma omp parallel for private(kulcs, ii, ki, ji, li, mi) shared(p, titkos)
    // osszes kulcs eloallitasa
    for (ii = 'A'; ii <= 'Z'; ++ii)
        for (ji = 'A'; ji <= 'Z'; ++ji)
            for (ki = 'A'; ki <= 'Z'; ++ki)
                for (li = 'A'; li <= 'Z'; ++li)
                    for (mi = 'A'; mi <= 'Z';
                         ++mi) {
                        if ((kulcs =
                             (char *)
                             malloc(sizeof
                                (char) *
                                KULCS_MERET))
                            == NULL) {
                            printf
                                ("Memoria (kulcs) faliora\n");
                            exit(-1);
                        }

                        kulcs[0] = ii;
                        kulcs[1] = ji;
                        kulcs[2] = ki;
                        kulcs[3] = li;
                        kulcs[4] = mi;

                        exor_tores(kulcs,
                               KULCS_MERET,
                               titkos,
                               p -
                               titkos);
                    }

    return 0;
}

double atlagos_szohossz(const char *titkos, int titkos_meret)
{
    int sz = 0;
    for (int i = 0; i < titkos_meret; ++i) {
        if (titkos[i] == ' ') {
            ++sz;
        }
    }

    return (double)titkos_meret / sz;
}

int tiszta_lehet(const char *titkos, int titkos_meret)
{
    // a tiszta szoveg valszeg tartalmazza a gyakori magyar szavakat
    // illetve az átlagos szóhossz vizsgálatával csökkentjük a
    // potenciális töréseket

    double szohossz = atlagos_szohossz(titkos, titkos_meret);

    return szohossz > 3.0 && szohossz < 9.0
        && strcasestr(titkos, "hogy") && strcasestr(titkos, "nem")
        && strcasestr(titkos, "ne")
        && strcasestr(titkos, "az") && strcasestr(titkos, "ha");
}

void exor(const char kulcs[], int kulcs_meret, char titkos[],
      int titkos_meret, char *buffer)
{
    int kulcs_index = 0;
    for (int i = 0; i < titkos_meret; ++i) {
        buffer[i] = titkos[i] ^ kulcs[kulcs_index];
        kulcs_index = (kulcs_index + 1) % kulcs_meret;
    }
}

void exor_tores(const char kulcs[], int kulcs_meret, char titkos[],
        int titkos_meret)
{
    char *buffer;

    if ((buffer =
         (char *)malloc(sizeof(char) * titkos_meret)) == NULL) {
        printf("Memoria (buffer) faliora\n");
        exit(-1);
    }

    exor(kulcs, kulcs_meret, titkos, titkos_meret, buffer);

    if (tiszta_lehet(buffer, titkos_meret)) {
        printf
            ("Kulcs: [%c%c%c%c%c]\nTiszta szoveg: [%s]\n",
             kulcs[0], kulcs[1], kulcs[2], kulcs[3], kulcs[4],
             buffer);
    }

    free(buffer);
}
            ]]>
            </programlisting>                
        </para>                 
    </section>        
    <section>
        <title>Neurális OR, AND és EXOR kapu</title>
        <para>
            R
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/Koyw6IH5ScQ">https://youtu.be/Koyw6IH5ScQ</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R">https://gitlab.com/nbatfai/bhax/tree/master/attention_raising/NN_R</link>               
        </para>
        <para>
            Az R egy szintaktailag sokkal egyszerűbb mint a magas szintű programozási nyelvek nagy rész. Főként statisztikai adatok szemléltetése,AI,ML, BigData, DataScience,Buisness Intelligence a felhasználásának nagy része. Nekünk is hasonló a feladatunk. A Feladat, hogy felépítsünk egy egyszerű "neurális hálót" amelyet arra tanítunk, hogy meg tudja különböztetni a más programozási nyelvekben használt logikai operátorokat: or ,and,exor.

            OR:
            A vagy operátor, ha az egyik állítás igaz akkor az egész feltétel igaz.(0 1),(1 0)
            AND:
            Az és operátor, csak akkor igaz, ha mind a két állítás igaz.(1 1)
            EXOR:
            A kizáró vagy operátor, amely csak akkor igaz, ha vagy az egyik, vagy a másik állítás igaz.
            A különbség a vagy-hoz képest, hogy sima OR akkor is igaz, ha mind a két állítás igaz:(1,1),
            azonban az EXOR ebben az esetben hamis lesz.

            Ezekre a logika műveletekre fogjuk megtanítani a neurális hálónk segítségével a programunkat.
            Íme a neurális hálónk tanítási gráfjai:
        </para> 
        <mediaobject>
                <imageobject>
                    <imagedata fileref="Caesar/graph1.png" width="100%"/>
                </imageobject>
                <textobject>
                    <phrase>AND , OR</phrase>
                </textobject>
            </mediaobject>

            <mediaobject>
                <imageobject>
                    <imagedata fileref="Caesar/graph3.png" width="100%"/>
                </imageobject>
                <textobject>
                    <phrase>EXOR</phrase>
                </textobject>
            </mediaobject>
    </section>        
    <section>
        <title>Hiba-visszaterjesztéses perceptron</title>
        <para>
            Fontos, hogy ebben a feladatban még nem 
            a <link xlink:href="https://prezi.com/0u8ncvvoabcr/no-programming-programming/">neurális paradigma</link> megismerése 
            a cél, hanem a többrétegű perceptron memóriakezelése (lásd majd a változó argumentumszámú
            konstruktorban a <type>double ***</type> szerkezetet). 
        </para>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/XpBnR31BRJY">https://youtu.be/XpBnR31BRJY</link>
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nbatfai/nahshon/blob/master/ql.hpp#L64">https://github.com/nbatfai/nahshon/blob/master/ql.hpp#L64</link>               
        </para>
        <para>
            Három double vár a a konstruktor, melyebe a perception memóriakezelés szemléltetése gyanánt a mandelbrot halmazunk rbg kódjait(RGB színkód:red,green,blue a várt szín piros zöld és kék értékeinek megadásával érhetjük el). Ezeket pászítjuk bele a Perception osztályunk konstruktorába.
        </para>            
    </section>        
    <section>
        <title>Vörös Pipacs Pokol/írd ki, mit lát Steve</title>
        <para>
            Megoldás videó: <link xlink:href="https://youtu.be/-GX8dzGqTdM">https://youtu.be/-GX8dzGqTdM</link>      
        </para>
        <para>
            Megoldás forrása: <link xlink:href="https://github.com/nbatfai/RedFlowerHell">https://github.com/nbatfai/RedFlowerHell</link>               
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat... ezt kell az olvasónak kidolgoznia, mint labor- vagy otthoni mérési feladatot!
            Ha mi már megtettük, akkor használd azt, dolgozd fel, javítsd, adj hozzá értéket!
        </para>            
    </section>
</chapter>
