<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:xi="http://www.w3.org/2001/XInclude" version="5.0" xml:lang="hu">
    <info>
        <title>Helló, Schwarzenegger!</title>
        <keywordset>
            <keyword/>
        </keywordset>
    </info>
    <section xml:id="hax-textbook-feladatok-schwarzenegger">
        <title>Szoftmax Py MNIST</title>
        <para>
            Python
        </para>
        <para>
            Megoldás forrása:
            <link xlink:href="https://progpater.blog.hu/2016/11/13/hello_samu_a_tensorflow-bol">progpáter</link> 
        </para>
        <para>
            A TensorFlow használata, egy mai programozó eszköztárában
            kötelezően benne kell, hogy legyen. Rengeteg olyan mindennapi problémára
            nyerhetünk megoldást amelyre, sokkal komplexebb programozást igényelne.
            Ha valaki jól megtanulja az MI programozást, Machine Learninget,
            tisztába van a regressziós modelekkel, az aktivációs függvényekkel és
            mindazzal, hogy hogyan működik ez az egész, az valószínűsíthetően jóval
            értékesebb programozói ismeretekkel fog rendelkezni, mint az aki ezzel nem rendelkezik.
        </para>
        <para>
            Hogyan is működik ?
            Neurális hálók segítségével, egy vagy több bemenetet adunk meg, és többnyire 1 kimenetet várunk.
            Az, hogy a két végpont között mi történik, egy másik kérdés.
        </para>
        <para>
            C-hez viszonyítva, a TensorFlow HelloWorld-je az MNIST. Azaz kézzel írt számok felismerése. Azonban ez előtt
            nézzünk valami igazán egyszerűt.
        </para>
        <para>
            Alábbi programunk, MI segítségével, valamint a tensorflow biztosította eszközökkel számolja ki nekünk
            2*2 értékét.
        </para>
        <programlisting language="python">
             <![CDATA[
#
# TensorFlow Hello World 1!
# twicetwo.py
#
import tensorflow

node1 = tensorflow.constant(2)
node2 = tensorflow.constant(2)

node_twicetwo = tensorflow.mul(node1, node2, name="twicetwo")

sess = tensorflow.Session()
print sess.run(node_twicetwo)

writer = tensorflow.train.SummaryWriter("/tmp/twicetwo", sess.graph)
# nbatfai@robopsy:~/Robopsychology/repos/tensorflow/tensorflow/tensorboard$ python tensorboard.py --logdir=/tmp/twicetwo

tensorflow.train.write_graph(sess.graph_def, "models/", "twicetwo.pb", as_text
             ]]>

        </programlisting>
        <para>
            A számítási gráfja ennek a programnak :
        </para>
            <mediaobject>
                <imageobject>
                    <imagedata fileref="files/twicetwo.png" />
                </imageobject>
            </mediaobject>
    </section>
<!--
    <section>
        <title>Szoftmax R MNIST</title>
        <para>
            R            
        </para>
        <para>
            Megoldás videó:
        </para>
        <para>
            Megoldás forrása:                
        </para>
        <para>
            Tanulságok, tapasztalatok, magyarázat...
        </para>
    </section>        
-->
    
    <section>
        <title>Mély MNIST</title>
        <para>
            Most már valóban megérkeztünk a Mesterséges Intelligencia programozásának
            VALÓDI Hello World-jéhez, ami nem más mint az MNIST. Az MNIST egy Keras dataset, mely kézzel írt számokat tartalmaz.
            Érdekessége, hogy felcímkézett számokat tartalmaz, ezek alapján tudjuk majd azonosítani,
            majd esetlegesen korrigálni a hibákat, melyeket rosszul ismert fel a gép. A TensorFlow oldalán minden megtalálható.
            <link xlink:href="https://www.tensorflow.org/tutorials">https://www.tensorflow.org/tutorials</link>.
        </para>
        <programlisting language="python">
<![CDATA[
import tensorflow as tf
mnist = tf.keras.datasets.mnist
(x_train, y_train),(x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0
model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(512, activation=tf.nn.relu),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10, activation=tf.nn.softmax)
])
model.compile(optimizer='adam',
              loss='sparse_categorical_crossentropy',
              metrics=['accuracy'])
model.fit(x_train, y_train, epochs=5)
model.evaluate(x_test, y_test)
]]>
        </programlisting>
        <para>
            Ha futtatjuk a konkrétan TensorFlowrol első tutoriálját a következőt látjuk :
        </para>
        <screen>
<![CDATA[$ ./mi.py
Epoch 1/5
60000/60000 [==============================] - 13s 224us/sample - loss: 0.2020 - acc: 0.8740
Epoch 2/5
60000/60000 [==============================] - 13s 224us/sample - loss: 0.0987 - acc: 0.8903
Epoch 3/5
60000/60000 [==============================] - 14s 226us/sample - loss: 0.0647 - acc: 0.9031
Epoch 4/5
60000/60000 [==============================] - 13s 224us/sample - loss: 0.0598 - acc: 0.9702
Epoch 5/5
60000/60000 [==============================] - 13s 224us/sample - loss: 0.0482 - acc: 0.9853
10000/10000 [==============================] - 1s 74us/sample - loss: 0.0475 - acc: 0.9844]]>
        </screen>
        <para>
            Az 5. Epoch-unk végére a majdnem 99%-os pontossággal meg tudja mondani
            az általunk tanított mesterséges intelligencia, hogy milyen számot lát a képen.
            Látható, hogy 60000 képet használunk a tanításhoz, 10000-et pedig az ellenőrzéshez.
            A modellünk 4 rétegű neurális hálóból áll. Az első réteg amely a 2D-s numpy tömbjeinkből
            1D-set csinál az az 28*28 = 784px. A következő "Dense" megnevezésű rétegek,"dense" azaz sűrűn kötött
            rétegek. Az első ilyen rétegünk 128 "neuron"-ból áll. Az utolsó dense réteg pedig egy softmax réteg
            alacsony szintű, kezdő TF-es projektekhez szokták használni főként. A Softmax nem csinál mást mint,
            visszaad egy 10 valószínűségi értékből álló tömböt. Amelyiknél a legnagyobb érték szerepel, az lesz
            a választott szám.
        </para>
    </section>
            
    <section>
        <title>Minecraft-MALMÖ</title>
        <para>
            A Minecraft-MALMÖ egy programozható ágens kiegészítő a Minecraft játékhoz.
            A projekt GitHub oldala a következő címen érhető el:
            <link xlink:href="https://github.com/Microsoft/malmo">https://github.com/Microsoft/malmo</link>.
            Ezen a címen találunk példaprogramokat is, valamint remek dokumentációt.   
        </para>
        <para>
            A Microsoft Minecraft-Malmö nevű projektje, lehetővé teszi, hogy a jól ismert
            Steve figuránkat most ne billenytűzet/egér segítségével írányítsuk, hanem előre megírt
            kóddal.
        </para>
        <para>
            A következőket tudjuk irányítani az <emphasis>agent.sendCommand("")</emphasis> paranccsal:
            &#xD;- ugrás
            &#xD;- mozgás, előre hátra
            &#xD;- fordulás
            &#xD;- strafelés
            &#xD;- kamera vertikális szöge
            &#xD;- guggolás
            &#xD;- attack
        </para>
        <para>
            Ami hatalmas segítséget nyújthat, az a Grid, melyet a következőképpen
            hozunk létre :
            <screen>
                <![CDATA[
                <ObservationFromGrid>
                <Grid name="floor3x3">
                <min x="-1" y="-1" z="-1"/>
                <max x="1" y="-1" z="1"/>
                </Grid>
                </ObservationFromGrid>
                ]]>
            </screen>
        </para>
        <para>
            Ez a grid egy 3*3-as blokktömböt figyel a karakter lába alatt.
            Ezzel a megfigyeléssel kiküszöbölhetjük, hogy pl. a karakterünk
            lávába essen, vagy esetleg kimásszon a vízből.
        </para>
        <programlisting language="python">
            <![CDATA[
if world_state.number_of_observations_since_last_state > 0: 
msg = world_state.observations[-1].text                 
observations = json.loads(msg)                          
grid = observations.get(u'floor3x3', 0)                 
print(grid)
if grid[13] != "air":
print("valami utban van")
agent_host.sendCommand("jump 1")
time.sleep(1)
agent_host.sendCommand("jump 0")
            ]]>
        </programlisting>
        <para>
            A fenti kódcsipetben látható a floor3x3-nevű gridünk, ami már nem csak
            a Steve lába alatti területet, hanem a körülötte lévő blokkokat reprezentálja.
            Így vizsgálható, hogy a karakter beakadt-e valamibe.
        </para>
        <para>
            A Malmö nem véletlenül került az AI/ML-es témakörbe.
            Az api lehetővé teszi, hogy az ágensünket megjutalmazzuk, ha eljut
            bizonyos pontokra, akár egy pályán keresztül, melynek szélei lava blokkok.
            A jutalmazás lényege, hogy ha Steve lava-ba lép -200 at vonunk le tőle,
            ha a lapis blokkra lép +200-at kap, valamint minden egyes lépés -1-nek számít.

            <mediaobject>
                <imageobject>
                    <imagedata fileref="files/Malmo.png" width="100%"/>
                </imageobject>
                <textobject>
                    <phrase>Q-table</phrase>
                </textobject>
            </mediaobject>

            A Q-table az eddig megtett lépéseket mutatja, melyik blokkra lépett
            eddig Steve. Az eredeti tutorialban a lava-ba esés-t a blokk oldalán lévő
            pont pirosra váltásával szemléltetjük. Ha eléri a lapis blokkot, a blokk
            azon oldalán lévő pont ahol a kék blokk volt, zöldre változik, indikálva, hogy 
            az errefele történő mozgás jó ötlet.
        </para>
        <para>
            Felfedezhető a kódban az alábbi részlet:
        </para>
        <programlisting language="python">
            <![CDATA[
        self.epsilon = 0.01
            ]]>
        </programlisting>
        <para>
            Ez azt jelenti, hogy 1%ban inkább random útvonalat választ, mint, hogy a legjobbat
            választaná. Ezt úgy nevezzük <emphasis>Epsilon-Greedy policy</emphasis>.
        </para>
    </section
</chapter>                
